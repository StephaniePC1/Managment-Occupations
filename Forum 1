original_list = [1, 2, 2, 3, 4, 4, 5]
unique_elements = set(original_list)
result_list = list(unique_elements)

print(result_list)



my_set = {1, 2, 3, 4, 5}
print(3 in my_set)  # True
print(6 in my_set)

set1 = {1, 2, 3, 4, 5}
set2 = {3, 4, 5, 6, 7}

union_result = set1.union(set2)
intersection_result = set1.intersection(set2)
difference_result = set1.difference(set2)

print("Union:", union_result)
print("Intersection:", intersection_result)
print("Difference:", difference_result)


# Define sets of strings and values
set1 = {"apple", "orange", "banana", "grape"}
set2 = {"orange", "grape", "kiwi", "melon"}

# Find the difference between set1 and set2
difference_result = set1.difference(set2)




Forum 

oth for loops and comprehensions in Python are used for iteration, but they have different use cases and syntax. Here's a comparison between the two:

For Loop:
Syntax:

python
Copy code
for variable in iterable:
    # code block to execute for each iteration
Use Cases:

Used for general-purpose iteration.
Offers more flexibility for complex logic and multiple statements within the loop.
Suitable when the result needs to be built up step by step or when side effects are involved.
Example:

python
Copy code
numbers = [1, 2, 3, 4, 5]
squared_numbers = []

for num in numbers:
    squared_numbers.append(num ** 2)

print(squared_numbers)
List Comprehension:
Syntax:

python
Copy code
result = [expression for variable in iterable if condition]
Use Cases:

Used for creating a new list by applying a transformation or filtering elements from an existing iterable.
Offers a concise and expressive syntax for simple operations.
Generally more readable and can be more efficient for simple cases.
Example:

python
Copy code
numbers = [1, 2, 3, 4, 5]
squared_numbers = [num ** 2 for num in numbers]

print(squared_numbers)
Comparison:
Readability:

Comprehensions are often more concise and can improve code readability, especially for simple operations.
Performance:

Comprehensions can be more efficient in terms of performance, especially for simple operations, due to the underlying optimizations in the Python interpreter.
Flexibility:

for loops offer more flexibility for complex logic, multiple statements, and side effects.
Memory Efficiency:

Comprehensions can be more memory-efficient, especially when dealing with large datasets, as they are optimized for creating new iterables.
Examples:
Using a For Loop:
python
Copy code
numbers = [1, 2, 3, 4, 5]
squared_numbers = []

for num in numbers:
    if num % 2 == 0:
        squared_numbers.append(num ** 2)

print(squared_numbers)
Using a List Comprehension:
python
Copy code
numbers = [1, 2, 3, 4, 5]
squared_numbers = [num ** 2 for num in numbers if num % 2 == 0]

print(squared_numbers)
In summary, use a for loop when you need more flexibility and control over the iteration process, and use a comprehension when you want a concise and expressive way to create a new iterable based on an existing one. The choice depends on the specific requirements and complexity of the task at hand.
# Display the result
print("Set 1:", set1)
print("Set 2:", set2)
print("Set 1 - Set 2 (Difference):", difference_result)


sing a For Loop:
python
Copy code
words = ["apple", "banana", "orange", "kiwi"]

word_lengths = []
for word in words:
    word_lengths.append(len(word))

print(word_lengths)
In this example, a for loop is used to iterate over each word in the words list, calculate the length of each word using len(word), and then append the result to the word_lengths list. This approach is suitable when you have more complex logic or need to perform multiple operations within the loop.

Using a List Comprehension:
python
Copy code
words = ["apple", "banana", "orange", "kiwi"]

word_lengths = [len(word) for word in words]

print(word_lengths)
In this example, a list comprehension is used to achieve the same result more concisely. The list comprehension iterates over each word in the words list, applies the len(word) expression, and creates a new list (word_lengths) with the lengths of the words. This approach is appropriate when the operation is simple, and you want a more compact and readable syntax.

Consideration:
If the logic involves only a single expression or operation applied to each element, and you are building a new list, a list comprehension is often a cleaner and more Pythonic choice.

If the logic is more complex, or if you need to perform multiple operations or include conditional statements within the loop, a traditional for loop with an explicit code block may be more suitable.

def divide_numbers(a, b):
    assert b != 0, "Denominator must not be zero"
    result = a / b
    print("Result:", result)

# Example usage:
numerator = 10
denominator = 0

try:
    divide_numbers(numerator, denominator)
except AssertionError as e:
    print(f"Assertion Error: {e}")

hoose between assert and try-except based on your use case and the nature of the checks you need to perform. If the conditions are critical for the correct operation of your program and should always be true, assert might be suitable. If the conditions might fail due to external factors or user input, try-except provides a more flexible error-handling mechanism
